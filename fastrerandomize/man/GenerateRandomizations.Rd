% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FRR_GenerateRandomizations.R
\name{GenerateRandomizations}
\alias{GenerateRandomizations}
\title{Generate randomizations for experimental design}
\usage{
GenerateRandomizations(
  n_units,
  n_treated,
  X,
  randomization_accept_prob,
  threshold_func = NULL,
  max_draws = 10^6,
  batch_size = 10^5,
  randomization_type = "monte_carlo",
  approximate_inv = TRUE,
  seed = NULL,
  verbose = TRUE
)
}
\arguments{
\item{n_units}{An integer specifying the total number of experimental units}

\item{n_treated}{An integer specifying the number of units to be assigned to treatment}

\item{X}{A numeric matrix of covariates used for balance checking. Cannot be NULL.}

\item{randomization_accept_prob}{A numeric value between 0 and 1 specifying the probability threshold for accepting randomizations based on balance}

\item{threshold_func}{A JAX function that computes a balance measure for each randomization. Only used for Monte Carlo sampling.}

\item{max_draws}{An integer specifying the maximum number of randomizations to draw in Monte Carlo sampling}

\item{batch_size}{An integer specifying batch size for Monte Carlo processing}

\item{randomization_type}{A string specifying the type of randomization: either "exact" or "monte_carlo"}

\item{seed}{An integer seed for random number generation in Monte Carlo sampling}

\item{verbose}{A logical value indicating whether to print progress information. Default is TRUE}
}
\value{
A JAX array containing the accepted randomizations, where each row represents
one possible treatment assignment vector
}
\description{
This function generates randomizations for experimental design using either exact enumeration
or Monte Carlo sampling methods. It provides a unified interface to both approaches while
handling memory and computational constraints appropriately.
}
\details{
The function supports two methods of generating randomizations:
\enumerate{
\item Exact enumeration: Generates all possible randomizations (memory intensive but exact)
\item Monte Carlo sampling: Generates randomizations through sampling (more memory efficient)
}

For large problems (e.g., X with >20 columns), Monte Carlo sampling is recommended.
}
\examples{
# Generate randomizations using exact enumeration
X <- matrix(rnorm(100*5), 100, 5)
RandomizationSet_Exact <- GenerateRandomizations(100, 50, X, 
               randomization_accept_prob=0.1,
               randomization_type="exact")

# Generate randomizations using Monte Carlo sampling
RandomizationSet_MC <- GenerateRandomizations(
               n_units = 100, 
               n_treated = 50, 
               X = X,
               randomization_accept_prob=0.1,
               randomization_type="monte_carlo",
               max_draws=1000)

}
\seealso{
\code{\link{GenerateRandomizations_Exact}} for the exact enumeration method
\code{\link{GenerateRandomizations_MonteCarlo}} for the Monte Carlo sampling method
}
